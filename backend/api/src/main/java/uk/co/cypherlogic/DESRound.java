package uk.co.cypherlogic;

/**
 * Data_Encryption Standard (DES) Round Class
 *
 * @author ESRS Group 2
 * @version 2022-03-16
 */
public class DESRound {

    // D Box expansion, 32 bits to 48 bits for S-boxes
    private static final int[] EP = {31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 28, 29, 30, 31, 0};

    // Permutation, Compress 48 bits back to 32 bits
    private static final int[] PERM = {15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17, 30, 9, 1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21, 10, 3, 24};

    // S BOXES FOR DATA SUBSITUTION
    private static final String[][][] SBOXES
            = {
                {
                    {"1110", "0100", "1101", "0001", "0010", "1111", "1011", "1000", "0011", "1010", "0110", "1100", "0101", "1001", "0000", "0111"},
                    {"0000", "1111", "0111", "0100", "1110", "0010", "1101", "0001", "1010", "0110", "1100", "1011", "1001", "0101", "0011", "1000"},
                    {"0100", "0001", "1110", "1000", "1101", "0110", "0010", "1011", "1111", "1100", "1001", "0111", "0011", "1010", "0101", "0000"},
                    {"1111", "1100", "1000", "0010", "0100", "1001", "0001", "0111", "0101", "1011", "0011", "1110", "1010", "0000", "0110", "1101"}
                },
                {
                    {"1111", "0001", "1000", "1110", "0110", "1011", "0011", "0100", "1001", "0111", "0010", "1101", "1100", "0000", "0101", "1010"},
                    {"0011", "1101", "0100", "0111", "1111", "0010", "1000", "1110", "1100", "0000", "0001", "1010", "0110", "1001", "1011", "0101"},
                    {"0000", "1110", "0111", "1011", "1010", "0100", "1101", "0001", "0101", "1000", "1100", "0110", "1001", "0011", "0010", "1111"},
                    {"1101", "1000", "1010", "0001", "0011", "1111", "0100", "0010", "1011", "0110", "0111", "1100", "0000", "0101", "1110", "1001"}
                },
                {
                    {"1010", "0000", "1001", "1110", "0110", "0011", "1111", "0101", "0001", "1101", "1100", "0111", "1011", "0100", "0010", "1000"},
                    {"1101", "0111", "0000", "1001", "0011", "0100", "0110", "1010", "0010", "1000", "0101", "1110", "1100", "1011", "1111", "0001"},
                    {"1101", "0110", "0100", "1001", "1000", "1111", "0011", "0000", "1011", "0001", "0010", "1100", "0101", "1010", "1110", "0111"},
                    {"0001", "1010", "1101", "0000", "0110", "1001", "1000", "0111", "0100", "1111", "1110", "0011", "1011", "0101", "0010", "1100"}
                },
                {
                    {"0111", "1101", "1110", "0011", "0000", "0110", "1001", "1010", "0001", "0010", "1000", "0101", "1011", "1100", "0100", "1111"},
                    {"1101", "1000", "1011", "0101", "0110", "1111", "0000", "0011", "0100", "0111", "0010", "1100", "0001", "1010", "1110", "1001"},
                    {"1010", "0110", "1001", "0000", "1100", "1011", "0111", "1101", "1111", "0001", "0011", "1110", "0101", "0010", "1000", "0100"},
                    {"0011", "1111", "0000", "0110", "1010", "0001", "1101", "1000", "1001", "0100", "0101", "1011", "1100", "0111", "0010", "1110"}
                },
                {
                    {"0010", "1100", "0100", "0001", "0111", "1010", "1011", "0110", "1000", "0101", "0011", "1111", "1101", "0000", "1110", "1001"},
                    {"1110", "1011", "0010", "1100", "0100", "0111", "1101", "0001", "0101", "0000", "1111", "1010", "0011", "1001", "1000", "0110"},
                    {"0100", "0010", "0001", "1011", "1010", "1101", "0111", "1000", "1111", "1001", "1100", "0101", "0110", "0011", "0000", "1110"},
                    {"1011", "1000", "1100", "0111", "0001", "1110", "0010", "1101", "0110", "1111", "0000", "1001", "1010", "0100", "0101", "0011"}
                },
                {
                    {"1100", "0001", "1010", "1111", "1001", "0010", "0110", "1000", "0000", "1101", "0011", "0100", "1110", "0111", "0101", "1011"},
                    {"1010", "1111", "0100", "0010", "0111", "1100", "1001", "0101", "0110", "0001", "1101", "1110", "0000", "1011", "0011", "1000"},
                    {"1001", "1110", "1111", "0101", "0010", "1000", "1100", "0011", "0111", "0000", "0100", "1010", "0001", "1101", "1011", "0110"},
                    {"0100", "0011", "0010", "1100", "1001", "0101", "1111", "1010", "1011", "1110", "0001", "0111", "0110", "0000", "1000", "1101"}
                },
                {
                    {"0100", "1011", "0010", "1110", "1111", "0000", "1000", "1101", "0011", "1100", "1001", "0111", "0101", "1010", "0110", "0001"},
                    {"1101", "0000", "1011", "0111", "0100", "1001", "0001", "1010", "1110", "0011", "0101", "1100", "0010", "1111", "1000", "0110"},
                    {"0001", "0100", "1011", "1101", "1100", "0011", "0111", "1110", "1010", "1111", "0110", "1000", "0000", "0101", "1001", "0010"},
                    {"0110", "1011", "1101", "1000", "0001", "0100", "1010", "0111", "1001", "0101", "0000", "1111", "1110", "0010", "0011", "1100"}
                },
                {
                    {"1101", "0010", "1000", "0100", "0110", "1111", "1011", "0001", "1010", "1001", "0011", "1110", "0101", "0000", "1100", "0111"},
                    {"0001", "1111", "1101", "1000", "1010", "0011", "0111", "0100", "1100", "0101", "0110", "1011", "0000", "1110", "1001", "0010"},
                    {"0111", "1011", "0100", "0001", "1001", "1100", "1110", "0010", "0000", "0110", "1010", "1101", "1111", "0011", "0101", "1000"},
                    {"0010", "0001", "1110", "0111", "0100", "1010", "1000", "1101", "1111", "1100", "1001", "0000", "0011", "0101", "0110", "1011"}
                }
            };

    private int round;
    private BitArray leftIn;
    private BitArray rightIn;
    private BitArray roundKey;
    private BitArray expansionPerm;
    private String sBoxes;
    private BitArray perm;
    private BitArray leftOut;
    private BitArray rightOut;

    public DESRound(BitArray roundKey) {
        this.roundKey = roundKey;
    }

    public void doRound(BitArray left, BitArray right, int round) {
        this.round = round;
        leftIn = left;
        rightIn = right;
        // Swap right to left
        leftOut = right;

        // Expansion permutation on right, from 32 bits to 48 bits
        expansionPerm();

        // XOR expanded right with round key
        expansionPerm.xor(roundKey);

        // Perform S-box substitutions and concatenation
        sBoxes();

        // Compression permutation from 48 bits back to 32 bits
        permutation();

        // XOR left with permutation
        left.xor(perm);
        rightOut = left;
    }

    private void expansionPerm() {
        expansionPerm = new BitArray(48);
        for (int i = 0; i < 48; i++) {
            Bit bit = rightIn.getBitAt(EP[i]).copy();
            expansionPerm.putBitAt(bit, i);
        }
    }

    private void sBoxes() {
        String ep = expansionPerm.toString();
        sBoxes = "";
        for (int s = 0; s < 8; s++) {
            int start = s * 6;
            String row = "";
            String col = ep.substring(start + 1, start + 5);
            row += ep.charAt(start);
            row += ep.charAt(start + 5);
            sBoxes += SBOXES[s][Integer.parseInt(row, 2)][Integer.parseInt(col, 2)];
        }
    }

    private void permutation() {
        String permStr = "";
        for (int i = 0; i < 32; i++) {
            permStr += sBoxes.charAt(PERM[i]);
        }
        perm = new BitArray(permStr);
    }

    public String getLeftIn() {
        return leftIn.toString();
    }

    public String getRightIn() {
        return rightIn.toString();
    }

    public String getRoundKey() {
        return roundKey.toString();
    }

    public String getExpansionPerm() {
        return expansionPerm.toString();
    }

    public String getsBoxes() {
        return sBoxes;
    }

    public String getPerm() {
        return perm.toString();
    }

    public String getLeftOut() {
        return leftOut.toString();
    }

    public String getRightOut() {
        return rightOut.toString();
    }

    public int getRound() {
        return round;
    }
}
